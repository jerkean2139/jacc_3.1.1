import sgMail from '@sendgrid/mail';

if (!process.env.SENDGRID_API_KEY) {
  console.warn('SENDGRID_API_KEY not found in environment variables');
}

sgMail.setApiKey(process.env.SENDGRID_API_KEY || '');

export interface EmailAttachment {
  content: string; // base64 encoded
  filename: string;
  type: string;
  disposition: 'attachment' | 'inline';
}

export interface EmailParams {
  to: string;
  from: string;
  subject: string;
  text?: string;
  html?: string;
  attachments?: EmailAttachment[];
}

export async function sendEmail(apiKey: string, params: EmailParams): Promise<boolean> {
  try {
    if (!apiKey) {
      console.error('SendGrid API key not provided');
      return false;
    }

    // Temporarily set API key for this request if different
    if (apiKey !== process.env.SENDGRID_API_KEY) {
      sgMail.setApiKey(apiKey);
    }

    const msg = {
      to: params.to,
      from: params.from,
      subject: params.subject,
      text: params.text,
      html: params.html,
      attachments: params.attachments
    };

    await sgMail.send(msg);
    
    // Reset to environment API key
    if (apiKey !== process.env.SENDGRID_API_KEY && process.env.SENDGRID_API_KEY) {
      sgMail.setApiKey(process.env.SENDGRID_API_KEY);
    }

    return true;
  } catch (error) {
    console.error('SendGrid email error:', error);
    
    // Reset to environment API key on error
    if (process.env.SENDGRID_API_KEY) {
      sgMail.setApiKey(process.env.SENDGRID_API_KEY);
    }
    
    return false;
  }
}

export async function sendReportEmail(
  recipientEmail: string,
  senderEmail: string,
  reportType: string,
  merchantName: string,
  pdfBuffer: Buffer,
  agentName: string
): Promise<boolean> {
  const subject = `${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report - ${merchantName}`;
  
  const htmlContent = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background: linear-gradient(135deg, #1e40af, #3b82f6); color: white; padding: 30px; text-align: center;">
        <h1 style="margin: 0;">Merchant Services ${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report</h1>
      </div>
      
      <div style="padding: 30px; background: #f9fafb;">
        <p>Dear Team,</p>
        
        <p>Please find attached the ${reportType} report for <strong>${merchantName}</strong>.</p>
        
        <div style="background: white; border-left: 4px solid #10b981; padding: 20px; margin: 20px 0;">
          <h3 style="margin: 0 0 10px 0; color: #1e40af;">Report Details</h3>
          <ul style="margin: 0; padding-left: 20px;">
            <li><strong>Business:</strong> ${merchantName}</li>
            <li><strong>Report Type:</strong> ${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Analysis</li>
            <li><strong>Generated by:</strong> ${agentName}</li>
            <li><strong>Date:</strong> ${new Date().toLocaleDateString()}</li>
          </ul>
        </div>
        
        <p>This comprehensive analysis provides detailed insights into payment processing options and potential cost savings opportunities.</p>
        
        <p>If you have any questions about this report, please don't hesitate to reach out.</p>
        
        <p>Best regards,<br>
        <strong>${agentName}</strong><br>
        JACC Merchant Services</p>
      </div>
      
      <div style="background: #1f2937; color: white; padding: 20px; text-align: center; font-size: 14px;">
        <p style="margin: 0;"><strong>JACC - Merchant Services Intelligence Platform</strong></p>
        <p style="margin: 5px 0 0 0; opacity: 0.8;">Professional payment processing analysis and optimization</p>
      </div>
    </div>
  `;

  return await sendEmail(process.env.SENDGRID_API_KEY || '', {
    to: recipientEmail,
    from: senderEmail,
    subject,
    html: htmlContent,
    attachments: [{
      content: pdfBuffer.toString('base64'),
      filename: `${reportType}-report-${merchantName.replace(/\s+/g, '-')}.pdf`,
      type: 'application/pdf',
      disposition: 'attachment'
    }]
  });
}