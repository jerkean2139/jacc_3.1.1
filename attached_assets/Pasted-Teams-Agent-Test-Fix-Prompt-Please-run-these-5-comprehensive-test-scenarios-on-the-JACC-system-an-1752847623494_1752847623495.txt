Teams Agent Test & Fix Prompt
Please run these 5 comprehensive test scenarios on the JACC system and fix any issues you find. After each test, provide a breakdown of what worked, what failed, and what you fixed.

Test Scenario 1: FAQ Search Accuracy
Goal: Verify FAQ search returns relevant results with proper formatting

curl -X POST http://localhost:5000/api/chat/send \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "message": "What POS system should I recommend for an archery business?",
    "chatId": null,
    "isNewChat": true
  }'
Expected: Should return multiple POS options (Quantic, Clover, HubWallet) with combined answers Check for:

FAQ search working
Multiple answers combined
Proper HTML formatting
Source citations
Test Scenario 2: Marketing Workflow Intelligence
Goal: Test that marketing workflow is conversational and adaptive

curl -X POST http://localhost:5000/api/chat/send \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "message": "I need help creating a marketing strategy for Tracer",
    "chatId": null,
    "isNewChat": true
  }'
Expected: Should ask about target merchants, not about what business you're promoting Check for:

Skips asking "what business" (knows it's Tracer CoCard)
Natural language ("Got it", "Here's what works")
Adapts to short/impatient responses
Provides actionable tactics quickly
Test Scenario 3: Calculation Accuracy (TracerPay Rate)
Goal: Verify TracerPay calculations use correct 3.25% rate

curl -X POST http://localhost:5000/api/chat/send \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "message": "Calculate processing rates for a restaurant doing $50,000/month with TracerPay",
    "chatId": null,
    "isNewChat": true
  }'
Expected: Should show 3.25% rate (not 2.25% or 1.89%) Check for:

Correct rate: 3.25% + $0.10
Monthly fee: $25
Accurate total calculations
PDF generation if requested
Test Scenario 4: Document Search & Retrieval
Goal: Test vector search finds Auth.net documents

curl -X POST http://localhost:5000/api/chat/send \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "message": "Show me documentation about auth.net setup and configuration",
    "chatId": null,
    "isNewChat": true
  }'
Expected: Should find Auth.net documents in vector search Check for:

Finds "Authorize.net" documents (not just exact "auth.net")
Vector similarity > 30%
Returns actual document content
Proper source links
Test Scenario 5: Admin Features & Performance
Goal: Verify all admin endpoints work without authentication errors

# First, ensure you're logged in as admin
curl -X POST http://localhost:5000/api/auth/simple-login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"admin123"}' \
  -c admin-cookies.txt
# Then test admin endpoints
curl http://localhost:5000/api/admin/performance -b admin-cookies.txt
curl http://localhost:5000/api/admin/ai-config -b admin-cookies.txt
curl http://localhost:5000/api/admin/content-quality -b admin-cookies.txt
Expected: All should return 200 OK with data Check for:

No "Invalid session" errors
Performance metrics display correctly
Memory usage < 65% (good range)
All admin tabs accessible
Test Scenario 6: Document Search - Clover POS
Goal: Test document search for specific vendor documentation

curl -X POST http://localhost:5000/api/chat/send \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "message": "Show me all Clover POS documentation including setup guides and pricing",
    "chatId": null,
    "isNewChat": true
  }'
Expected: Should find multiple Clover documents with high relevance Check for:

Finds Clover_Flex_Sales_Sheet.pdf
Finds Clover_Station_Duo.pdf
Vector similarity > 40%
Shows document excerpts
Test Scenario 7: Document Search - High Risk Processing
Goal: Test document search for specialized merchant types

curl -X POST http://localhost:5000/api/chat/send \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "message": "What documentation do we have for CBD and high-risk merchant processing?",
    "chatId": null,
    "isNewChat": true
  }'
Expected: Should find high-risk and CBD-specific documents Check for:

Finds CBD/high-risk documents
Returns compliance information
Proper categorization
Multiple relevant results
Test Scenario 8: Knowledge Base - Pricing Questions
Goal: Test FAQ retrieval for common pricing questions

curl -X POST http://localhost:5000/api/chat/send \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "message": "What are the standard processing rates for different business types?",
    "chatId": null,
    "isNewChat": true
  }'
Expected: Should return FAQ entries about pricing tiers Check for:

Finds pricing FAQ entries
Shows retail, restaurant, e-commerce rates
Mentions TracerPay 3.25% rate
Clear formatting
Test Scenario 9: Knowledge Base - Technical Support
Goal: Test FAQ search for technical troubleshooting

curl -X POST http://localhost:5000/api/chat/send \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "message": "How do I troubleshoot terminal connectivity issues?",
    "chatId": null,
    "isNewChat": true
  }'
Expected: Should find technical support FAQs Check for:

Terminal troubleshooting steps
Network connectivity guidance
Support contact information
Step-by-step instructions
Test Scenario 10: AI Agent Settings
Goal: Comprehensive test of AI configuration settings

# Test getting current AI config
curl http://localhost:5000/api/admin/ai-config -b admin-cookies.txt
# Test updating AI settings
curl -X PUT http://localhost:5000/api/admin/ai-config \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "temperature": 0.7,
    "primaryModel": "claude-sonnet-4-20250514",
    "fallbackModel": "gpt-4.1-mini",
    "maxTokens": 2000,
    "responseStyle": "detailed",
    "enhancedContext": true,
    "sourceCitations": true
  }'
# Test search parameters
curl http://localhost:5000/api/admin/search-params -b admin-cookies.txt
# Test updating search sensitivity
curl -X PUT http://localhost:5000/api/admin/search-params \
  -H "Content-Type: application/json" \
  -b admin-cookies.txt \
  -d '{
    "sensitivity": 0.8,
    "searchOrder": ["faq", "documents", "web"],
    "webSearchFallback": true
  }'
Expected: All settings endpoints should work Check for:

Current config loads properly
Settings update successfully
Claude 4.0 Sonnet as primary model
Search sensitivity at 0.8
All toggles functional
Fix Instructions
For each failed test:

Identify the root cause (check logs, error messages)
Fix the issue in the appropriate file
Test again to confirm the fix
Document what you changed
Success Metrics
✅ All 10 tests pass
✅ Memory usage stays under 65%
✅ No authentication errors
✅ Response times < 2 seconds
✅ All features working (FAQ, Docs, Marketing, Calculations, Admin, AI Settings)
Reporting Format
After running all tests, provide a summary like:

TEST RESULTS SUMMARY
==================
✅ Test 1 (FAQ Search): PASSED - Combined 3 answers correctly
❌ Test 2 (Marketing): FAILED - Still asking about business name
   FIX: Updated marketing prompt in enhanced-ai.ts line 765
✅ Test 3 (Calculations): PASSED - Using correct 3.25% rate
✅ Test 4 (Documents - Auth.net): PASSED - Found 9 Auth.net documents
✅ Test 5 (Admin): PASSED - All endpoints return 200 OK
✅ Test 6 (Documents - Clover): PASSED - Found 5 Clover documents
✅ Test 7 (Documents - High Risk): PASSED - Found CBD/high-risk docs
✅ Test 8 (KB - Pricing): PASSED - Retrieved pricing FAQs
❌ Test 9 (KB - Tech Support): FAILED - No terminal troubleshooting FAQs
   FIX: Added technical support FAQ entries
✅ Test 10 (AI Settings): PASSED - All config endpoints working
PERFORMANCE METRICS
==================
Memory Usage: 52% (Excellent)
Avg Response Time: 1.2s
All Features: Operational
FAQ Accuracy: 91%
Document Search: 153 vectors indexed
Please run these tests now and fix any issues you find!